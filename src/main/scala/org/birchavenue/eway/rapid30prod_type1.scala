// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package org.birchavenue.eway


case class CreateAccessCode(request: Option[org.birchavenue.eway.CreateAccessCodeRequest] = None)


case class CreateAccessCodeRequest(Customer: Option[org.birchavenue.eway.Customerable] = None,
  ShippingAddress: Option[org.birchavenue.eway.ShippingAddress] = None,
  Items: Option[org.birchavenue.eway.ArrayOfLineItem] = None,
  Options: Option[org.birchavenue.eway.ArrayOfOption] = None,
  Payment: Option[org.birchavenue.eway.Payment] = None,
  RedirectUrl: Option[String] = None,
  CustomerIP: Option[String] = None,
  DeviceID: Option[String] = None,
  Method: org.birchavenue.eway.Method) extends BaseRequestable


trait BaseRequestable {
  
}


case class BaseRequest() extends BaseRequestable


trait Customerable {
  val TokenCustomerID: Option[Long]
  val Reference: Option[String]
  val Title: Option[String]
  val FirstName: Option[String]
  val LastName: Option[String]
  val CompanyName: Option[String]
  val JobDescription: Option[String]
  val Street1: Option[String]
  val Street2: Option[String]
  val City: Option[String]
  val State: Option[String]
  val PostalCode: Option[String]
  val Country: Option[String]
  val Email: Option[String]
  val Phone: Option[String]
  val Mobile: Option[String]
  val Comments: Option[String]
  val Fax: Option[String]
  val Url: Option[String]
}


case class Customer(TokenCustomerID: Option[Long] = None,
  Reference: Option[String] = None,
  Title: Option[String] = None,
  FirstName: Option[String] = None,
  LastName: Option[String] = None,
  CompanyName: Option[String] = None,
  JobDescription: Option[String] = None,
  Street1: Option[String] = None,
  Street2: Option[String] = None,
  City: Option[String] = None,
  State: Option[String] = None,
  PostalCode: Option[String] = None,
  Country: Option[String] = None,
  Email: Option[String] = None,
  Phone: Option[String] = None,
  Mobile: Option[String] = None,
  Comments: Option[String] = None,
  Fax: Option[String] = None,
  Url: Option[String] = None) extends Customerable


case class TokenCustomer(TokenCustomerID: Option[Long] = None,
  Reference: Option[String] = None,
  Title: Option[String] = None,
  FirstName: Option[String] = None,
  LastName: Option[String] = None,
  CompanyName: Option[String] = None,
  JobDescription: Option[String] = None,
  Street1: Option[String] = None,
  Street2: Option[String] = None,
  City: Option[String] = None,
  State: Option[String] = None,
  PostalCode: Option[String] = None,
  Country: Option[String] = None,
  Email: Option[String] = None,
  Phone: Option[String] = None,
  Mobile: Option[String] = None,
  Comments: Option[String] = None,
  Fax: Option[String] = None,
  Url: Option[String] = None,
  tokencustomersequence1: org.birchavenue.eway.TokenCustomerSequence1) extends Customerable {
  lazy val CardNumber = tokencustomersequence1.CardNumber
  lazy val CardStartMonth = tokencustomersequence1.CardStartMonth
  lazy val CardStartYear = tokencustomersequence1.CardStartYear
  lazy val CardIssueNumber = tokencustomersequence1.CardIssueNumber
  lazy val CardName = tokencustomersequence1.CardName
  lazy val CardExpiryMonth = tokencustomersequence1.CardExpiryMonth
  lazy val CardExpiryYear = tokencustomersequence1.CardExpiryYear
  lazy val IsActive = tokencustomersequence1.IsActive
}


case class TokenCustomerSequence1(CardNumber: Option[String] = None,
  CardStartMonth: Option[String] = None,
  CardStartYear: Option[String] = None,
  CardIssueNumber: Option[String] = None,
  CardName: Option[String] = None,
  CardExpiryMonth: Option[String] = None,
  CardExpiryYear: Option[String] = None,
  IsActive: Boolean)


case class ShippingAddress(ShippingMethod: Option[String] = None,
  FirstName: Option[String] = None,
  LastName: Option[String] = None,
  Street1: Option[String] = None,
  Street2: Option[String] = None,
  City: Option[String] = None,
  State: Option[String] = None,
  Country: Option[String] = None,
  PostalCode: Option[String] = None,
  Email: Option[String] = None,
  Phone: Option[String] = None,
  Fax: Option[String] = None)


case class ArrayOfLineItem(LineItem: Option[org.birchavenue.eway.LineItem]*)


case class LineItem(SKU: Option[String] = None,
  Description: Option[String] = None,
  Quantity: Option[Int] = None,
  UnitCost: Option[Int] = None,
  Tax: Option[Int] = None,
  Total: Option[Int] = None)


case class ArrayOfOption(Option: Option[org.birchavenue.eway.OptionType]*)


case class OptionType(Value: Option[String] = None)


case class Payment(TotalAmount: Int,
  InvoiceNumber: Option[String] = None,
  InvoiceDescription: Option[String] = None,
  InvoiceReference: Option[String] = None,
  CurrencyCode: Option[String] = None)

trait Method

object Method {
  def fromString(value: String): Method = value match {
    case "ProcessPayment" => ProcessPaymentValue
    case "CreateTokenCustomer" => CreateTokenCustomer
    case "UpdateTokenCustomer" => UpdateTokenCustomer
    case "TokenPayment" => TokenPayment

  }
}

case object ProcessPaymentValue extends Method { override def toString = "ProcessPayment" }
case object CreateTokenCustomer extends Method { override def toString = "CreateTokenCustomer" }
case object UpdateTokenCustomer extends Method { override def toString = "UpdateTokenCustomer" }
case object TokenPayment extends Method { override def toString = "TokenPayment" }


case class CreateAccessCodeResponse(CreateAccessCodeResult: Option[org.birchavenue.eway.CreateAccessCodeResponseType] = None)


case class CreateAccessCodeResponseType(Errors: Option[String] = None,
  AccessCode: Option[String] = None,
  Customer: Option[org.birchavenue.eway.TokenCustomer] = None,
  Payment: Option[org.birchavenue.eway.Payment] = None,
  FormActionURL: Option[String] = None) extends BaseResponsable


trait BaseResponsable {
  val Errors: Option[String]
}


case class BaseResponse(Errors: Option[String] = None) extends BaseResponsable


case class GetAccessCodeResult(request: Option[org.birchavenue.eway.GetAccessCodeResultRequest] = None)


case class GetAccessCodeResultRequest(AccessCode: Option[String] = None) extends BaseRequestable


case class GetAccessCodeResultResponse(GetAccessCodeResultResult: Option[org.birchavenue.eway.GetAccessCodeResultResponseType] = None)


case class GetAccessCodeResultResponseType(Errors: Option[String] = None,
  AccessCode: Option[String] = None,
  AuthorisationCode: Option[String] = None,
  ResponseCode: Option[String] = None,
  ResponseMessage: Option[String] = None,
  InvoiceNumber: Option[String] = None,
  InvoiceReference: Option[String] = None,
  TotalAmount: Option[Int] = None,
  TransactionID: Option[Int] = None,
  TransactionStatus: Option[Boolean] = None,
  TokenCustomerID: Option[Long] = None,
  BeagleScore: Option[BigDecimal] = None,
  Options: Option[org.birchavenue.eway.ArrayOfOption] = None,
  Verification: Option[org.birchavenue.eway.VerificationResult] = None) extends BaseResponsable


case class VerificationResult(CVN: org.birchavenue.eway.VerificationStatus,
  Address: org.birchavenue.eway.VerificationStatus,
  Email: org.birchavenue.eway.VerificationStatus,
  Mobile: org.birchavenue.eway.VerificationStatus,
  Phone: org.birchavenue.eway.VerificationStatus)

trait VerificationStatus

object VerificationStatus {
  def fromString(value: String): VerificationStatus = value match {
    case "Unchecked" => Unchecked
    case "Valid" => Valid
    case "Invalid" => Invalid

  }
}

case object Unchecked extends VerificationStatus { override def toString = "Unchecked" }
case object Valid extends VerificationStatus { override def toString = "Valid" }
case object Invalid extends VerificationStatus { override def toString = "Invalid" }

