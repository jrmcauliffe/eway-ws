// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package org.birchavenue.eway
    
/**
usage:
val obj = scalaxb.fromXML[org.birchavenue.eway.Foo](node)
val document = scalaxb.toXML[org.birchavenue.eway.Foo](obj, "foo", org.birchavenue.eway.defaultScope)
**/
object `package` extends XMLProtocol { }

trait XMLProtocol extends scalaxb.XMLStandardTypes {
  val defaultScope = scalaxb.toScope(None -> "https://api.ewaypayments.com/",
    Some("tns0") -> "https://www.eway.com.au/gateway/managedpayment/test",
    Some("tns") -> "https://api.ewaypayments.com/",
    Some("xs") -> "http://www.w3.org/2001/XMLSchema",
    Some("xsi") -> "http://www.w3.org/2001/XMLSchema-instance")
  implicit lazy val EwayCreateAccessCodeFormat: scalaxb.XMLFormat[org.birchavenue.eway.CreateAccessCode] = new DefaultEwayCreateAccessCodeFormat {}
  implicit lazy val EwayCreateAccessCodeRequestFormat: scalaxb.XMLFormat[org.birchavenue.eway.CreateAccessCodeRequest] = new DefaultEwayCreateAccessCodeRequestFormat {}
  implicit lazy val EwayBaseRequestableFormat: scalaxb.XMLFormat[org.birchavenue.eway.BaseRequestable] = new DefaultEwayBaseRequestableFormat {}
  implicit lazy val EwayBaseRequestFormat: scalaxb.XMLFormat[org.birchavenue.eway.BaseRequest] = new DefaultEwayBaseRequestFormat {}
  implicit lazy val EwayCustomerableFormat: scalaxb.XMLFormat[org.birchavenue.eway.Customerable] = new DefaultEwayCustomerableFormat {}
  implicit lazy val EwayCustomerFormat: scalaxb.XMLFormat[org.birchavenue.eway.Customer] = new DefaultEwayCustomerFormat {}
  implicit lazy val EwayTokenCustomerFormat: scalaxb.XMLFormat[org.birchavenue.eway.TokenCustomer] = new DefaultEwayTokenCustomerFormat {}
  implicit lazy val EwayTokenCustomerSequence1Format: scalaxb.XMLFormat[org.birchavenue.eway.TokenCustomerSequence1] = new DefaultEwayTokenCustomerSequence1Format {}
  implicit lazy val EwayShippingAddressFormat: scalaxb.XMLFormat[org.birchavenue.eway.ShippingAddress] = new DefaultEwayShippingAddressFormat {}
  implicit lazy val EwayArrayOfLineItemFormat: scalaxb.XMLFormat[org.birchavenue.eway.ArrayOfLineItem] = new DefaultEwayArrayOfLineItemFormat {}
  implicit lazy val EwayLineItemFormat: scalaxb.XMLFormat[org.birchavenue.eway.LineItem] = new DefaultEwayLineItemFormat {}
  implicit lazy val EwayArrayOfOptionFormat: scalaxb.XMLFormat[org.birchavenue.eway.ArrayOfOption] = new DefaultEwayArrayOfOptionFormat {}
  implicit lazy val EwayOptionTypeFormat: scalaxb.XMLFormat[org.birchavenue.eway.OptionType] = new DefaultEwayOptionTypeFormat {}
  implicit lazy val EwayPaymentFormat: scalaxb.XMLFormat[org.birchavenue.eway.Payment] = new DefaultEwayPaymentFormat {}
  implicit lazy val EwayMethodFormat: scalaxb.XMLFormat[org.birchavenue.eway.Method] = new DefaultEwayMethodFormat {}
  implicit lazy val EwayCreateAccessCodeResponseFormat: scalaxb.XMLFormat[org.birchavenue.eway.CreateAccessCodeResponse] = new DefaultEwayCreateAccessCodeResponseFormat {}
  implicit lazy val EwayCreateAccessCodeResponseTypeFormat: scalaxb.XMLFormat[org.birchavenue.eway.CreateAccessCodeResponseType] = new DefaultEwayCreateAccessCodeResponseTypeFormat {}
  implicit lazy val EwayBaseResponsableFormat: scalaxb.XMLFormat[org.birchavenue.eway.BaseResponsable] = new DefaultEwayBaseResponsableFormat {}
  implicit lazy val EwayBaseResponseFormat: scalaxb.XMLFormat[org.birchavenue.eway.BaseResponse] = new DefaultEwayBaseResponseFormat {}
  implicit lazy val EwayGetAccessCodeResultFormat: scalaxb.XMLFormat[org.birchavenue.eway.GetAccessCodeResult] = new DefaultEwayGetAccessCodeResultFormat {}
  implicit lazy val EwayGetAccessCodeResultRequestFormat: scalaxb.XMLFormat[org.birchavenue.eway.GetAccessCodeResultRequest] = new DefaultEwayGetAccessCodeResultRequestFormat {}
  implicit lazy val EwayGetAccessCodeResultResponseFormat: scalaxb.XMLFormat[org.birchavenue.eway.GetAccessCodeResultResponse] = new DefaultEwayGetAccessCodeResultResponseFormat {}
  implicit lazy val EwayGetAccessCodeResultResponseTypeFormat: scalaxb.XMLFormat[org.birchavenue.eway.GetAccessCodeResultResponseType] = new DefaultEwayGetAccessCodeResultResponseTypeFormat {}
  implicit lazy val EwayVerificationResultFormat: scalaxb.XMLFormat[org.birchavenue.eway.VerificationResult] = new DefaultEwayVerificationResultFormat {}
  implicit lazy val EwayVerificationStatusFormat: scalaxb.XMLFormat[org.birchavenue.eway.VerificationStatus] = new DefaultEwayVerificationStatusFormat {}
  implicit lazy val EwayCreateCustomerFormat: scalaxb.XMLFormat[org.birchavenue.eway.CreateCustomer] = new DefaultEwayCreateCustomerFormat {}
  implicit lazy val EwayCreateCustomerSequence1Format: scalaxb.XMLFormat[org.birchavenue.eway.CreateCustomerSequence1] = new DefaultEwayCreateCustomerSequence1Format {}
  implicit lazy val EwayCreateCustomerSequence2Format: scalaxb.XMLFormat[org.birchavenue.eway.CreateCustomerSequence2] = new DefaultEwayCreateCustomerSequence2Format {}
  implicit lazy val EwayCreateCustomerSequence3Format: scalaxb.XMLFormat[org.birchavenue.eway.CreateCustomerSequence3] = new DefaultEwayCreateCustomerSequence3Format {}
  implicit lazy val EwayCreateCustomerResponseFormat: scalaxb.XMLFormat[org.birchavenue.eway.CreateCustomerResponse] = new DefaultEwayCreateCustomerResponseFormat {}
  implicit lazy val EwayEWAYHeaderFormat: scalaxb.XMLFormat[org.birchavenue.eway.EWAYHeader] = new DefaultEwayEWAYHeaderFormat {}
  implicit lazy val EwayUpdateCustomerFormat: scalaxb.XMLFormat[org.birchavenue.eway.UpdateCustomer] = new DefaultEwayUpdateCustomerFormat {}
  implicit lazy val EwayUpdateCustomerSequence1Format: scalaxb.XMLFormat[org.birchavenue.eway.UpdateCustomerSequence1] = new DefaultEwayUpdateCustomerSequence1Format {}
  implicit lazy val EwayUpdateCustomerSequence2Format: scalaxb.XMLFormat[org.birchavenue.eway.UpdateCustomerSequence2] = new DefaultEwayUpdateCustomerSequence2Format {}
  implicit lazy val EwayUpdateCustomerSequence3Format: scalaxb.XMLFormat[org.birchavenue.eway.UpdateCustomerSequence3] = new DefaultEwayUpdateCustomerSequence3Format {}
  implicit lazy val EwayUpdateCustomerResponseFormat: scalaxb.XMLFormat[org.birchavenue.eway.UpdateCustomerResponse] = new DefaultEwayUpdateCustomerResponseFormat {}
  implicit lazy val EwayQueryCustomerFormat: scalaxb.XMLFormat[org.birchavenue.eway.QueryCustomer] = new DefaultEwayQueryCustomerFormat {}
  implicit lazy val EwayQueryCustomerResponseFormat: scalaxb.XMLFormat[org.birchavenue.eway.QueryCustomerResponse] = new DefaultEwayQueryCustomerResponseFormat {}
  implicit lazy val EwayCreditCardFormat: scalaxb.XMLFormat[org.birchavenue.eway.CreditCard] = new DefaultEwayCreditCardFormat {}
  implicit lazy val EwayManagedCustomerableFormat: scalaxb.XMLFormat[org.birchavenue.eway.ManagedCustomerable] = new DefaultEwayManagedCustomerableFormat {}
  implicit lazy val EwayManagedCustomerFormat: scalaxb.XMLFormat[org.birchavenue.eway.ManagedCustomer] = new DefaultEwayManagedCustomerFormat {}
  implicit lazy val EwayQueryCustomerByReferenceFormat: scalaxb.XMLFormat[org.birchavenue.eway.QueryCustomerByReference] = new DefaultEwayQueryCustomerByReferenceFormat {}
  implicit lazy val EwayQueryCustomerByReferenceResponseFormat: scalaxb.XMLFormat[org.birchavenue.eway.QueryCustomerByReferenceResponse] = new DefaultEwayQueryCustomerByReferenceResponseFormat {}
  implicit lazy val EwayProcessPaymentFormat: scalaxb.XMLFormat[org.birchavenue.eway.ProcessPayment] = new DefaultEwayProcessPaymentFormat {}
  implicit lazy val EwayProcessPaymentResponseFormat: scalaxb.XMLFormat[org.birchavenue.eway.ProcessPaymentResponse] = new DefaultEwayProcessPaymentResponseFormat {}
  implicit lazy val EwayCCPaymentResponseFormat: scalaxb.XMLFormat[org.birchavenue.eway.CCPaymentResponse] = new DefaultEwayCCPaymentResponseFormat {}
  implicit lazy val EwayProcessPaymentWithBeagleFormat: scalaxb.XMLFormat[org.birchavenue.eway.ProcessPaymentWithBeagle] = new DefaultEwayProcessPaymentWithBeagleFormat {}
  implicit lazy val EwayProcessPaymentWithBeagleResponseFormat: scalaxb.XMLFormat[org.birchavenue.eway.ProcessPaymentWithBeagleResponse] = new DefaultEwayProcessPaymentWithBeagleResponseFormat {}
  implicit lazy val EwayProcessPaymentWithCVNFormat: scalaxb.XMLFormat[org.birchavenue.eway.ProcessPaymentWithCVN] = new DefaultEwayProcessPaymentWithCVNFormat {}
  implicit lazy val EwayProcessPaymentWithCVNResponseFormat: scalaxb.XMLFormat[org.birchavenue.eway.ProcessPaymentWithCVNResponse] = new DefaultEwayProcessPaymentWithCVNResponseFormat {}
  implicit lazy val EwayQueryPaymentFormat: scalaxb.XMLFormat[org.birchavenue.eway.QueryPayment] = new DefaultEwayQueryPaymentFormat {}
  implicit lazy val EwayQueryPaymentResponseFormat: scalaxb.XMLFormat[org.birchavenue.eway.QueryPaymentResponse] = new DefaultEwayQueryPaymentResponseFormat {}
  implicit lazy val EwayArrayOfManagedTransactionFormat: scalaxb.XMLFormat[org.birchavenue.eway.ArrayOfManagedTransaction] = new DefaultEwayArrayOfManagedTransactionFormat {}
  implicit lazy val EwayManagedTransactionFormat: scalaxb.XMLFormat[org.birchavenue.eway.ManagedTransaction] = new DefaultEwayManagedTransactionFormat {}

  trait DefaultEwayCreateAccessCodeFormat extends scalaxb.ElemNameParser[org.birchavenue.eway.CreateAccessCode] {
    val targetNamespace: Option[String] = Some("https://api.ewaypayments.com/")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.eway.CreateAccessCode] =
      phrase((scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "request")) ^^
      { case p1 =>
      org.birchavenue.eway.CreateAccessCode(p1.nilOption map { scalaxb.fromXML[org.birchavenue.eway.CreateAccessCodeRequest](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.eway.CreateAccessCode, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[Option[org.birchavenue.eway.CreateAccessCodeRequest]](__obj.request, Some("https://api.ewaypayments.com/"), Some("request"), __scope, false))

  }

  trait DefaultEwayCreateAccessCodeRequestFormat extends scalaxb.ElemNameParser[org.birchavenue.eway.CreateAccessCodeRequest] {
    val targetNamespace: Option[String] = Some("https://api.ewaypayments.com/")
    
    override def typeName: Option[String] = Some("CreateAccessCodeRequest")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.eway.CreateAccessCodeRequest] =
      phrase(opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "Customer")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "ShippingAddress")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "Items")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "Options")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "Payment")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "RedirectUrl")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "CustomerIP")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "DeviceID")) ~ 
      (scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "Method")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 =>
      org.birchavenue.eway.CreateAccessCodeRequest(p1.headOption map { scalaxb.fromXML[org.birchavenue.eway.Customerable](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[org.birchavenue.eway.ShippingAddress](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[org.birchavenue.eway.ArrayOfLineItem](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[org.birchavenue.eway.ArrayOfOption](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[org.birchavenue.eway.Payment](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[org.birchavenue.eway.Method](p9, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: org.birchavenue.eway.CreateAccessCodeRequest, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Customer map { scalaxb.toXML[org.birchavenue.eway.Customerable](_, Some("https://api.ewaypayments.com/"), Some("Customer"), __scope, false) } getOrElse {Nil},
        __obj.ShippingAddress map { scalaxb.toXML[org.birchavenue.eway.ShippingAddress](_, Some("https://api.ewaypayments.com/"), Some("ShippingAddress"), __scope, false) } getOrElse {Nil},
        __obj.Items map { scalaxb.toXML[org.birchavenue.eway.ArrayOfLineItem](_, Some("https://api.ewaypayments.com/"), Some("Items"), __scope, false) } getOrElse {Nil},
        __obj.Options map { scalaxb.toXML[org.birchavenue.eway.ArrayOfOption](_, Some("https://api.ewaypayments.com/"), Some("Options"), __scope, false) } getOrElse {Nil},
        __obj.Payment map { scalaxb.toXML[org.birchavenue.eway.Payment](_, Some("https://api.ewaypayments.com/"), Some("Payment"), __scope, false) } getOrElse {Nil},
        __obj.RedirectUrl map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("RedirectUrl"), __scope, false) } getOrElse {Nil},
        __obj.CustomerIP map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("CustomerIP"), __scope, false) } getOrElse {Nil},
        __obj.DeviceID map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("DeviceID"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[org.birchavenue.eway.Method](__obj.Method, Some("https://api.ewaypayments.com/"), Some("Method"), __scope, false))

  }

  trait DefaultEwayBaseRequestableFormat extends scalaxb.XMLFormat[org.birchavenue.eway.BaseRequestable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, org.birchavenue.eway.BaseRequestable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("https://api.ewaypayments.com/"), Some("CreateAccessCodeRequest")) => Right(scalaxb.fromXML[org.birchavenue.eway.CreateAccessCodeRequest](node, stack))
          case (Some("https://api.ewaypayments.com/"), Some("GetAccessCodeResultRequest")) => Right(scalaxb.fromXML[org.birchavenue.eway.GetAccessCodeResultRequest](node, stack))
          case _ => Right(scalaxb.fromXML[org.birchavenue.eway.BaseRequest](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: org.birchavenue.eway.BaseRequestable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: org.birchavenue.eway.CreateAccessCodeRequest => scalaxb.toXML[org.birchavenue.eway.CreateAccessCodeRequest](x, __namespace, __elementLabel, __scope, true)
      case x: org.birchavenue.eway.GetAccessCodeResultRequest => scalaxb.toXML[org.birchavenue.eway.GetAccessCodeResultRequest](x, __namespace, __elementLabel, __scope, true)
      case x: org.birchavenue.eway.BaseRequest => scalaxb.toXML[org.birchavenue.eway.BaseRequest](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultEwayBaseRequestFormat extends scalaxb.XMLFormat[org.birchavenue.eway.BaseRequest] with scalaxb.CanWriteChildNodes[org.birchavenue.eway.BaseRequest] {
    val targetNamespace: Option[String] = Some("https://api.ewaypayments.com/")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, org.birchavenue.eway.BaseRequest] = seq match {
      case node: scala.xml.Node => Right(org.birchavenue.eway.BaseRequest())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: org.birchavenue.eway.BaseRequest, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultEwayCustomerableFormat extends scalaxb.XMLFormat[org.birchavenue.eway.Customerable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, org.birchavenue.eway.Customerable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("https://api.ewaypayments.com/"), Some("TokenCustomer")) => Right(scalaxb.fromXML[org.birchavenue.eway.TokenCustomer](node, stack))
          case _ => Right(scalaxb.fromXML[org.birchavenue.eway.Customer](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: org.birchavenue.eway.Customerable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: org.birchavenue.eway.TokenCustomer => scalaxb.toXML[org.birchavenue.eway.TokenCustomer](x, __namespace, __elementLabel, __scope, true)
      case x: org.birchavenue.eway.Customer => scalaxb.toXML[org.birchavenue.eway.Customer](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultEwayCustomerFormat extends scalaxb.ElemNameParser[org.birchavenue.eway.Customer] {
    val targetNamespace: Option[String] = Some("https://api.ewaypayments.com/")
    
    override def typeName: Option[String] = Some("Customer")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.eway.Customer] =
      phrase((scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "TokenCustomerID")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "Reference")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "Title")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "FirstName")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "LastName")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "CompanyName")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "JobDescription")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "Street1")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "Street2")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "City")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "State")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "PostalCode")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "Country")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "Email")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "Phone")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "Mobile")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "Comments")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "Fax")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "Url")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 =>
      org.birchavenue.eway.Customer(p1.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.eway.Customer, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Option[Long]](__obj.TokenCustomerID, Some("https://api.ewaypayments.com/"), Some("TokenCustomerID"), __scope, false),
        __obj.Reference map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("Reference"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Option[String]](__obj.Title, Some("https://api.ewaypayments.com/"), Some("Title"), __scope, false),
        __obj.FirstName map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("FirstName"), __scope, false) } getOrElse {Nil},
        __obj.LastName map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("LastName"), __scope, false) } getOrElse {Nil},
        __obj.CompanyName map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("CompanyName"), __scope, false) } getOrElse {Nil},
        __obj.JobDescription map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("JobDescription"), __scope, false) } getOrElse {Nil},
        __obj.Street1 map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("Street1"), __scope, false) } getOrElse {Nil},
        __obj.Street2 map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("Street2"), __scope, false) } getOrElse {Nil},
        __obj.City map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("City"), __scope, false) } getOrElse {Nil},
        __obj.State map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("State"), __scope, false) } getOrElse {Nil},
        __obj.PostalCode map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("PostalCode"), __scope, false) } getOrElse {Nil},
        __obj.Country map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("Country"), __scope, false) } getOrElse {Nil},
        __obj.Email map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("Email"), __scope, false) } getOrElse {Nil},
        __obj.Phone map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("Phone"), __scope, false) } getOrElse {Nil},
        __obj.Mobile map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("Mobile"), __scope, false) } getOrElse {Nil},
        __obj.Comments map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("Comments"), __scope, false) } getOrElse {Nil},
        __obj.Fax map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("Fax"), __scope, false) } getOrElse {Nil},
        __obj.Url map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("Url"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultEwayTokenCustomerFormat extends scalaxb.ElemNameParser[org.birchavenue.eway.TokenCustomer] {
    val targetNamespace: Option[String] = Some("https://api.ewaypayments.com/")
    
    override def typeName: Option[String] = Some("TokenCustomer")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.eway.TokenCustomer] =
      phrase((scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "TokenCustomerID")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "Reference")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "Title")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "FirstName")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "LastName")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "CompanyName")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "JobDescription")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "Street1")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "Street2")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "City")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "State")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "PostalCode")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "Country")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "Email")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "Phone")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "Mobile")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "Comments")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "Fax")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "Url")) ~ 
      ((opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "CardNumber")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "CardStartMonth")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "CardStartYear")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "CardIssueNumber")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "CardName")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "CardExpiryMonth")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "CardExpiryYear")) ~ 
      (scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "IsActive"))) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 => org.birchavenue.eway.TokenCustomerSequence1(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Boolean](p8, scalaxb.ElemName(node) :: stack)) }) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 =>
      org.birchavenue.eway.TokenCustomer(p1.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p20) })
    
    def writesChildNodes(__obj: org.birchavenue.eway.TokenCustomer, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Option[Long]](__obj.TokenCustomerID, Some("https://api.ewaypayments.com/"), Some("TokenCustomerID"), __scope, false),
        __obj.Reference map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("Reference"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Option[String]](__obj.Title, Some("https://api.ewaypayments.com/"), Some("Title"), __scope, false),
        __obj.FirstName map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("FirstName"), __scope, false) } getOrElse {Nil},
        __obj.LastName map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("LastName"), __scope, false) } getOrElse {Nil},
        __obj.CompanyName map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("CompanyName"), __scope, false) } getOrElse {Nil},
        __obj.JobDescription map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("JobDescription"), __scope, false) } getOrElse {Nil},
        __obj.Street1 map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("Street1"), __scope, false) } getOrElse {Nil},
        __obj.Street2 map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("Street2"), __scope, false) } getOrElse {Nil},
        __obj.City map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("City"), __scope, false) } getOrElse {Nil},
        __obj.State map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("State"), __scope, false) } getOrElse {Nil},
        __obj.PostalCode map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("PostalCode"), __scope, false) } getOrElse {Nil},
        __obj.Country map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("Country"), __scope, false) } getOrElse {Nil},
        __obj.Email map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("Email"), __scope, false) } getOrElse {Nil},
        __obj.Phone map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("Phone"), __scope, false) } getOrElse {Nil},
        __obj.Mobile map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("Mobile"), __scope, false) } getOrElse {Nil},
        __obj.Comments map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("Comments"), __scope, false) } getOrElse {Nil},
        __obj.Fax map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("Fax"), __scope, false) } getOrElse {Nil},
        __obj.Url map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("Url"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[org.birchavenue.eway.TokenCustomerSequence1](__obj.tokencustomersequence1, None, Some("tokencustomersequence1"), __scope, false))

  }

  trait DefaultEwayTokenCustomerSequence1Format extends scalaxb.XMLFormat[org.birchavenue.eway.TokenCustomerSequence1] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, org.birchavenue.eway.TokenCustomerSequence1] = Left("don't call me.")
    
    def writes(__obj: org.birchavenue.eway.TokenCustomerSequence1, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(__obj.CardNumber map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("CardNumber"), __scope, false) } getOrElse {Nil},
        __obj.CardStartMonth map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("CardStartMonth"), __scope, false) } getOrElse {Nil},
        __obj.CardStartYear map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("CardStartYear"), __scope, false) } getOrElse {Nil},
        __obj.CardIssueNumber map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("CardIssueNumber"), __scope, false) } getOrElse {Nil},
        __obj.CardName map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("CardName"), __scope, false) } getOrElse {Nil},
        __obj.CardExpiryMonth map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("CardExpiryMonth"), __scope, false) } getOrElse {Nil},
        __obj.CardExpiryYear map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("CardExpiryYear"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Boolean](__obj.IsActive, Some("https://api.ewaypayments.com/"), Some("IsActive"), __scope, false))


  }

  trait DefaultEwayShippingAddressFormat extends scalaxb.ElemNameParser[org.birchavenue.eway.ShippingAddress] {
    val targetNamespace: Option[String] = Some("https://api.ewaypayments.com/")
    
    override def typeName: Option[String] = Some("ShippingAddress")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.eway.ShippingAddress] =
      phrase(opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "ShippingMethod")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "FirstName")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "LastName")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "Street1")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "Street2")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "City")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "State")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "Country")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "PostalCode")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "Email")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "Phone")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "Fax")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 =>
      org.birchavenue.eway.ShippingAddress(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.eway.ShippingAddress, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.ShippingMethod map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("ShippingMethod"), __scope, false) } getOrElse {Nil},
        __obj.FirstName map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("FirstName"), __scope, false) } getOrElse {Nil},
        __obj.LastName map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("LastName"), __scope, false) } getOrElse {Nil},
        __obj.Street1 map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("Street1"), __scope, false) } getOrElse {Nil},
        __obj.Street2 map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("Street2"), __scope, false) } getOrElse {Nil},
        __obj.City map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("City"), __scope, false) } getOrElse {Nil},
        __obj.State map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("State"), __scope, false) } getOrElse {Nil},
        __obj.Country map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("Country"), __scope, false) } getOrElse {Nil},
        __obj.PostalCode map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("PostalCode"), __scope, false) } getOrElse {Nil},
        __obj.Email map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("Email"), __scope, false) } getOrElse {Nil},
        __obj.Phone map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("Phone"), __scope, false) } getOrElse {Nil},
        __obj.Fax map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("Fax"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultEwayArrayOfLineItemFormat extends scalaxb.ElemNameParser[org.birchavenue.eway.ArrayOfLineItem] {
    val targetNamespace: Option[String] = Some("https://api.ewaypayments.com/")
    
    override def typeName: Option[String] = Some("ArrayOfLineItem")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.eway.ArrayOfLineItem] =
      phrase(rep(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "LineItem")) ^^
      { case p1 =>
      org.birchavenue.eway.ArrayOfLineItem(p1.toSeq map { _.nilOption map { scalaxb.fromXML[org.birchavenue.eway.LineItem](_, scalaxb.ElemName(node) :: stack) }}: _*) })
    
    def writesChildNodes(__obj: org.birchavenue.eway.ArrayOfLineItem, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.LineItem flatMap { scalaxb.toXML[Option[org.birchavenue.eway.LineItem]](_, Some("https://api.ewaypayments.com/"), Some("LineItem"), __scope, false) })

  }

  trait DefaultEwayLineItemFormat extends scalaxb.ElemNameParser[org.birchavenue.eway.LineItem] {
    val targetNamespace: Option[String] = Some("https://api.ewaypayments.com/")
    
    override def typeName: Option[String] = Some("LineItem")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.eway.LineItem] =
      phrase(opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "SKU")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "Description")) ~ 
      (scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "Quantity")) ~ 
      (scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "UnitCost")) ~ 
      (scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "Tax")) ~ 
      (scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "Total")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 =>
      org.birchavenue.eway.LineItem(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.nilOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p4.nilOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p5.nilOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p6.nilOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.eway.LineItem, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.SKU map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("SKU"), __scope, false) } getOrElse {Nil},
        __obj.Description map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("Description"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Option[Int]](__obj.Quantity, Some("https://api.ewaypayments.com/"), Some("Quantity"), __scope, false),
        scalaxb.toXML[Option[Int]](__obj.UnitCost, Some("https://api.ewaypayments.com/"), Some("UnitCost"), __scope, false),
        scalaxb.toXML[Option[Int]](__obj.Tax, Some("https://api.ewaypayments.com/"), Some("Tax"), __scope, false),
        scalaxb.toXML[Option[Int]](__obj.Total, Some("https://api.ewaypayments.com/"), Some("Total"), __scope, false))

  }

  trait DefaultEwayArrayOfOptionFormat extends scalaxb.ElemNameParser[org.birchavenue.eway.ArrayOfOption] {
    val targetNamespace: Option[String] = Some("https://api.ewaypayments.com/")
    
    override def typeName: Option[String] = Some("ArrayOfOption")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.eway.ArrayOfOption] =
      phrase(rep(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "Option")) ^^
      { case p1 =>
      org.birchavenue.eway.ArrayOfOption(p1.toSeq map { _.nilOption map { scalaxb.fromXML[org.birchavenue.eway.OptionType](_, scalaxb.ElemName(node) :: stack) }}: _*) })
    
    def writesChildNodes(__obj: org.birchavenue.eway.ArrayOfOption, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Option flatMap { scalaxb.toXML[Option[org.birchavenue.eway.OptionType]](_, Some("https://api.ewaypayments.com/"), Some("Option"), __scope, false) })

  }

  trait DefaultEwayOptionTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.eway.OptionType] {
    val targetNamespace: Option[String] = Some("https://api.ewaypayments.com/")
    
    override def typeName: Option[String] = Some("Option")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.eway.OptionType] =
      phrase(opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "Value")) ^^
      { case p1 =>
      org.birchavenue.eway.OptionType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.eway.OptionType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Value map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("Value"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultEwayPaymentFormat extends scalaxb.ElemNameParser[org.birchavenue.eway.Payment] {
    val targetNamespace: Option[String] = Some("https://api.ewaypayments.com/")
    
    override def typeName: Option[String] = Some("Payment")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.eway.Payment] =
      phrase((scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "TotalAmount")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "InvoiceNumber")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "InvoiceDescription")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "InvoiceReference")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "CurrencyCode")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      org.birchavenue.eway.Payment(scalaxb.fromXML[Int](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.eway.Payment, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Int](__obj.TotalAmount, Some("https://api.ewaypayments.com/"), Some("TotalAmount"), __scope, false),
        __obj.InvoiceNumber map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("InvoiceNumber"), __scope, false) } getOrElse {Nil},
        __obj.InvoiceDescription map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("InvoiceDescription"), __scope, false) } getOrElse {Nil},
        __obj.InvoiceReference map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("InvoiceReference"), __scope, false) } getOrElse {Nil},
        __obj.CurrencyCode map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("CurrencyCode"), __scope, false) } getOrElse {Nil})

  }

  def buildEwayMethodFormat = new DefaultEwayMethodFormat {}
  trait DefaultEwayMethodFormat extends scalaxb.XMLFormat[org.birchavenue.eway.Method] {
    val targetNamespace: Option[String] = Some("https://api.ewaypayments.com/")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, org.birchavenue.eway.Method] =
      Right(org.birchavenue.eway.Method.fromString(seq.text))
    
    def writes(__obj: org.birchavenue.eway.Method, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, scala.xml.Text(__obj.toString))
  }

  trait DefaultEwayCreateAccessCodeResponseFormat extends scalaxb.ElemNameParser[org.birchavenue.eway.CreateAccessCodeResponse] {
    val targetNamespace: Option[String] = Some("https://api.ewaypayments.com/")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.eway.CreateAccessCodeResponse] =
      phrase(opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "CreateAccessCodeResult")) ^^
      { case p1 =>
      org.birchavenue.eway.CreateAccessCodeResponse(p1.headOption map { scalaxb.fromXML[org.birchavenue.eway.CreateAccessCodeResponseType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.eway.CreateAccessCodeResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.CreateAccessCodeResult map { scalaxb.toXML[org.birchavenue.eway.CreateAccessCodeResponseType](_, Some("https://api.ewaypayments.com/"), Some("CreateAccessCodeResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultEwayCreateAccessCodeResponseTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.eway.CreateAccessCodeResponseType] {
    val targetNamespace: Option[String] = Some("https://api.ewaypayments.com/")
    
    override def typeName: Option[String] = Some("CreateAccessCodeResponse")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.eway.CreateAccessCodeResponseType] =
      phrase(opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "Errors")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "AccessCode")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "Customer")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "Payment")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "FormActionURL")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      org.birchavenue.eway.CreateAccessCodeResponseType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[org.birchavenue.eway.TokenCustomer](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[org.birchavenue.eway.Payment](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.eway.CreateAccessCodeResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Errors map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("Errors"), __scope, false) } getOrElse {Nil},
        __obj.AccessCode map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("AccessCode"), __scope, false) } getOrElse {Nil},
        __obj.Customer map { scalaxb.toXML[org.birchavenue.eway.TokenCustomer](_, Some("https://api.ewaypayments.com/"), Some("Customer"), __scope, false) } getOrElse {Nil},
        __obj.Payment map { scalaxb.toXML[org.birchavenue.eway.Payment](_, Some("https://api.ewaypayments.com/"), Some("Payment"), __scope, false) } getOrElse {Nil},
        __obj.FormActionURL map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("FormActionURL"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultEwayBaseResponsableFormat extends scalaxb.XMLFormat[org.birchavenue.eway.BaseResponsable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, org.birchavenue.eway.BaseResponsable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("https://api.ewaypayments.com/"), Some("CreateAccessCodeResponse")) => Right(scalaxb.fromXML[org.birchavenue.eway.CreateAccessCodeResponseType](node, stack))
          case (Some("https://api.ewaypayments.com/"), Some("GetAccessCodeResultResponse")) => Right(scalaxb.fromXML[org.birchavenue.eway.GetAccessCodeResultResponseType](node, stack))
          case _ => Right(scalaxb.fromXML[org.birchavenue.eway.BaseResponse](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: org.birchavenue.eway.BaseResponsable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: org.birchavenue.eway.CreateAccessCodeResponseType => scalaxb.toXML[org.birchavenue.eway.CreateAccessCodeResponseType](x, __namespace, __elementLabel, __scope, true)
      case x: org.birchavenue.eway.GetAccessCodeResultResponseType => scalaxb.toXML[org.birchavenue.eway.GetAccessCodeResultResponseType](x, __namespace, __elementLabel, __scope, true)
      case x: org.birchavenue.eway.BaseResponse => scalaxb.toXML[org.birchavenue.eway.BaseResponse](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultEwayBaseResponseFormat extends scalaxb.ElemNameParser[org.birchavenue.eway.BaseResponse] {
    val targetNamespace: Option[String] = Some("https://api.ewaypayments.com/")
    
    override def typeName: Option[String] = Some("BaseResponse")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.eway.BaseResponse] =
      phrase(opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "Errors")) ^^
      { case p1 =>
      org.birchavenue.eway.BaseResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.eway.BaseResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.Errors map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("Errors"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultEwayGetAccessCodeResultFormat extends scalaxb.ElemNameParser[org.birchavenue.eway.GetAccessCodeResult] {
    val targetNamespace: Option[String] = Some("https://api.ewaypayments.com/")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.eway.GetAccessCodeResult] =
      phrase(opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "request")) ^^
      { case p1 =>
      org.birchavenue.eway.GetAccessCodeResult(p1.headOption map { scalaxb.fromXML[org.birchavenue.eway.GetAccessCodeResultRequest](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.eway.GetAccessCodeResult, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.request map { scalaxb.toXML[org.birchavenue.eway.GetAccessCodeResultRequest](_, Some("https://api.ewaypayments.com/"), Some("request"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultEwayGetAccessCodeResultRequestFormat extends scalaxb.ElemNameParser[org.birchavenue.eway.GetAccessCodeResultRequest] {
    val targetNamespace: Option[String] = Some("https://api.ewaypayments.com/")
    
    override def typeName: Option[String] = Some("GetAccessCodeResultRequest")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.eway.GetAccessCodeResultRequest] =
      phrase(opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "AccessCode")) ^^
      { case p1 =>
      org.birchavenue.eway.GetAccessCodeResultRequest(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.eway.GetAccessCodeResultRequest, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.AccessCode map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("AccessCode"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultEwayGetAccessCodeResultResponseFormat extends scalaxb.ElemNameParser[org.birchavenue.eway.GetAccessCodeResultResponse] {
    val targetNamespace: Option[String] = Some("https://api.ewaypayments.com/")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.eway.GetAccessCodeResultResponse] =
      phrase(opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "GetAccessCodeResultResult")) ^^
      { case p1 =>
      org.birchavenue.eway.GetAccessCodeResultResponse(p1.headOption map { scalaxb.fromXML[org.birchavenue.eway.GetAccessCodeResultResponseType](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.eway.GetAccessCodeResultResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.GetAccessCodeResultResult map { scalaxb.toXML[org.birchavenue.eway.GetAccessCodeResultResponseType](_, Some("https://api.ewaypayments.com/"), Some("GetAccessCodeResultResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultEwayGetAccessCodeResultResponseTypeFormat extends scalaxb.ElemNameParser[org.birchavenue.eway.GetAccessCodeResultResponseType] {
    val targetNamespace: Option[String] = Some("https://api.ewaypayments.com/")
    
    override def typeName: Option[String] = Some("GetAccessCodeResultResponse")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.eway.GetAccessCodeResultResponseType] =
      phrase(opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "Errors")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "AccessCode")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "AuthorisationCode")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "ResponseCode")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "ResponseMessage")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "InvoiceNumber")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "InvoiceReference")) ~ 
      (scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "TotalAmount")) ~ 
      (scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "TransactionID")) ~ 
      (scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "TransactionStatus")) ~ 
      (scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "TokenCustomerID")) ~ 
      (scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "BeagleScore")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "Options")) ~ 
      opt(scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "Verification")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 =>
      org.birchavenue.eway.GetAccessCodeResultResponseType(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.nilOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p9.nilOption map { scalaxb.fromXML[Int](_, scalaxb.ElemName(node) :: stack) },
        p10.nilOption map { scalaxb.fromXML[Boolean](_, scalaxb.ElemName(node) :: stack) },
        p11.nilOption map { scalaxb.fromXML[Long](_, scalaxb.ElemName(node) :: stack) },
        p12.nilOption map { scalaxb.fromXML[BigDecimal](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[org.birchavenue.eway.ArrayOfOption](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[org.birchavenue.eway.VerificationResult](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.eway.GetAccessCodeResultResponseType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.Errors map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("Errors"), __scope, false) } getOrElse {Nil},
        __obj.AccessCode map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("AccessCode"), __scope, false) } getOrElse {Nil},
        __obj.AuthorisationCode map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("AuthorisationCode"), __scope, false) } getOrElse {Nil},
        __obj.ResponseCode map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("ResponseCode"), __scope, false) } getOrElse {Nil},
        __obj.ResponseMessage map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("ResponseMessage"), __scope, false) } getOrElse {Nil},
        __obj.InvoiceNumber map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("InvoiceNumber"), __scope, false) } getOrElse {Nil},
        __obj.InvoiceReference map { scalaxb.toXML[String](_, Some("https://api.ewaypayments.com/"), Some("InvoiceReference"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Option[Int]](__obj.TotalAmount, Some("https://api.ewaypayments.com/"), Some("TotalAmount"), __scope, false),
        scalaxb.toXML[Option[Int]](__obj.TransactionID, Some("https://api.ewaypayments.com/"), Some("TransactionID"), __scope, false),
        scalaxb.toXML[Option[Boolean]](__obj.TransactionStatus, Some("https://api.ewaypayments.com/"), Some("TransactionStatus"), __scope, false),
        scalaxb.toXML[Option[Long]](__obj.TokenCustomerID, Some("https://api.ewaypayments.com/"), Some("TokenCustomerID"), __scope, false),
        scalaxb.toXML[Option[BigDecimal]](__obj.BeagleScore, Some("https://api.ewaypayments.com/"), Some("BeagleScore"), __scope, false),
        __obj.Options map { scalaxb.toXML[org.birchavenue.eway.ArrayOfOption](_, Some("https://api.ewaypayments.com/"), Some("Options"), __scope, false) } getOrElse {Nil},
        __obj.Verification map { scalaxb.toXML[org.birchavenue.eway.VerificationResult](_, Some("https://api.ewaypayments.com/"), Some("Verification"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultEwayVerificationResultFormat extends scalaxb.ElemNameParser[org.birchavenue.eway.VerificationResult] {
    val targetNamespace: Option[String] = Some("https://api.ewaypayments.com/")
    
    override def typeName: Option[String] = Some("VerificationResult")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.eway.VerificationResult] =
      phrase((scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "CVN")) ~ 
      (scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "Address")) ~ 
      (scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "Email")) ~ 
      (scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "Mobile")) ~ 
      (scalaxb.ElemName(Some("https://api.ewaypayments.com/"), "Phone")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      org.birchavenue.eway.VerificationResult(scalaxb.fromXML[org.birchavenue.eway.VerificationStatus](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[org.birchavenue.eway.VerificationStatus](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[org.birchavenue.eway.VerificationStatus](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[org.birchavenue.eway.VerificationStatus](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[org.birchavenue.eway.VerificationStatus](p5, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: org.birchavenue.eway.VerificationResult, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[org.birchavenue.eway.VerificationStatus](__obj.CVN, Some("https://api.ewaypayments.com/"), Some("CVN"), __scope, false),
        scalaxb.toXML[org.birchavenue.eway.VerificationStatus](__obj.Address, Some("https://api.ewaypayments.com/"), Some("Address"), __scope, false),
        scalaxb.toXML[org.birchavenue.eway.VerificationStatus](__obj.Email, Some("https://api.ewaypayments.com/"), Some("Email"), __scope, false),
        scalaxb.toXML[org.birchavenue.eway.VerificationStatus](__obj.Mobile, Some("https://api.ewaypayments.com/"), Some("Mobile"), __scope, false),
        scalaxb.toXML[org.birchavenue.eway.VerificationStatus](__obj.Phone, Some("https://api.ewaypayments.com/"), Some("Phone"), __scope, false))

  }

  def buildEwayVerificationStatusFormat = new DefaultEwayVerificationStatusFormat {}
  trait DefaultEwayVerificationStatusFormat extends scalaxb.XMLFormat[org.birchavenue.eway.VerificationStatus] {
    val targetNamespace: Option[String] = Some("https://api.ewaypayments.com/")
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, org.birchavenue.eway.VerificationStatus] =
      Right(org.birchavenue.eway.VerificationStatus.fromString(seq.text))
    
    def writes(__obj: org.birchavenue.eway.VerificationStatus, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scala.xml.Elem(scalaxb.Helper.getPrefix(__namespace, __scope).orNull, 
        __elementLabel getOrElse { sys.error("missing element label.") },
        scala.xml.Null, __scope, scala.xml.Text(__obj.toString))
  }


  trait Rapid30Soap12Bindings { this: scalaxb.SoapClients =>
    val endpoint: String
    lazy val targetNamespace: Option[String] = Some("https://api.ewaypayments.com/")
    lazy val service: org.birchavenue.eway.Rapid30Soap = new Rapid30Soap12Binding {}
    def baseAddress = new java.net.URI(endpoint)
    // def baseAddress = new java.net.URI("https://api.ewaypayments.com/soap.asmx")

    trait Rapid30Soap12Binding extends org.birchavenue.eway.Rapid30Soap {
      def createAccessCode(request: Option[org.birchavenue.eway.CreateAccessCodeRequest]): Either[scalaxb.Fault[Any], org.birchavenue.eway.CreateAccessCodeResponse] = 
        soapClient.requestResponse(scalaxb.toXML(org.birchavenue.eway.CreateAccessCode(request), Some("https://api.ewaypayments.com/"), "CreateAccessCode", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("https://api.ewaypayments.com/CreateAccessCode"))) match {
          case Left(x)  => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[org.birchavenue.eway.CreateAccessCodeResponse](body.headOption getOrElse {body}))
        }
      def getAccessCodeResult(request: Option[org.birchavenue.eway.GetAccessCodeResultRequest]): Either[scalaxb.Fault[Any], org.birchavenue.eway.GetAccessCodeResultResponse] = 
        soapClient.requestResponse(scalaxb.toXML(org.birchavenue.eway.GetAccessCodeResult(request), Some("https://api.ewaypayments.com/"), "GetAccessCodeResult", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("https://api.ewaypayments.com/GetAccessCodeResult"))) match {
          case Left(x)  => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[org.birchavenue.eway.GetAccessCodeResultResponse](body.headOption getOrElse {body}))
        }
    }
  }


  trait DefaultEwayCreateCustomerFormat extends scalaxb.ElemNameParser[org.birchavenue.eway.CreateCustomer] {
    val targetNamespace: Option[String] = Some("https://www.eway.com.au/gateway/managedpayment/test")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.eway.CreateCustomer] =
      phrase(((opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "Title")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "FirstName")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "LastName")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "Address")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "Suburb")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "State")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "Company")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "PostCode")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "Country")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "Email"))) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 => org.birchavenue.eway.CreateCustomerSequence1(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) }) ~ 
      ((opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "Fax")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "Phone")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "Mobile")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "CustomerRef")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "JobDesc")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "Comments")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "URL")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "CCNumber")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "CCNameOnCard")) ~ 
      (scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "CCExpiryMonth"))) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 => org.birchavenue.eway.CreateCustomerSequence2(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[Int](p10, scalaxb.ElemName(node) :: stack)) }) ~ 
      (((scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "CCExpiryYear"))) ^^ 
        { case p1 => org.birchavenue.eway.CreateCustomerSequence3(scalaxb.fromXML[Int](p1, scalaxb.ElemName(node) :: stack)) }) ^^
      { case p1 ~ p2 ~ p3 =>
      org.birchavenue.eway.CreateCustomer(p1,
        p2,
        p3) })
    
    def writesChildNodes(__obj: org.birchavenue.eway.CreateCustomer, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[org.birchavenue.eway.CreateCustomerSequence1](__obj.createcustomersequence1, None, Some("createcustomersequence1"), __scope, false),
        scalaxb.toXML[org.birchavenue.eway.CreateCustomerSequence2](__obj.createcustomersequence2, None, Some("createcustomersequence2"), __scope, false),
        scalaxb.toXML[org.birchavenue.eway.CreateCustomerSequence3](__obj.createcustomersequence3, None, Some("createcustomersequence3"), __scope, false))

  }

  trait DefaultEwayCreateCustomerSequence1Format extends scalaxb.XMLFormat[org.birchavenue.eway.CreateCustomerSequence1] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, org.birchavenue.eway.CreateCustomerSequence1] = Left("don't call me.")
    
    def writes(__obj: org.birchavenue.eway.CreateCustomerSequence1, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(scalaxb.toXML[Option[String]](__obj.Title, Some("https://api.ewaypayments.com/"), Some("Title"), __scope, false),
        __obj.FirstName map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("FirstName"), __scope, false) } getOrElse {Nil},
        __obj.LastName map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("LastName"), __scope, false) } getOrElse {Nil},
        __obj.Address map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("Address"), __scope, false) } getOrElse {Nil},
        __obj.Suburb map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("Suburb"), __scope, false) } getOrElse {Nil},
        __obj.State map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("State"), __scope, false) } getOrElse {Nil},
        __obj.Company map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("Company"), __scope, false) } getOrElse {Nil},
        __obj.PostCode map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("PostCode"), __scope, false) } getOrElse {Nil},
        __obj.Country map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("Country"), __scope, false) } getOrElse {Nil},
        __obj.Email map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("Email"), __scope, false) } getOrElse {Nil})


  }

  trait DefaultEwayCreateCustomerSequence2Format extends scalaxb.XMLFormat[org.birchavenue.eway.CreateCustomerSequence2] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, org.birchavenue.eway.CreateCustomerSequence2] = Left("don't call me.")
    
    def writes(__obj: org.birchavenue.eway.CreateCustomerSequence2, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(__obj.Fax map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("Fax"), __scope, false) } getOrElse {Nil},
        __obj.Phone map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("Phone"), __scope, false) } getOrElse {Nil},
        __obj.Mobile map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("Mobile"), __scope, false) } getOrElse {Nil},
        __obj.CustomerRef map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("CustomerRef"), __scope, false) } getOrElse {Nil},
        __obj.JobDesc map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("JobDesc"), __scope, false) } getOrElse {Nil},
        __obj.Comments map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("Comments"), __scope, false) } getOrElse {Nil},
        __obj.URL map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("URL"), __scope, false) } getOrElse {Nil},
        __obj.CCNumber map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("CCNumber"), __scope, false) } getOrElse {Nil},
        __obj.CCNameOnCard map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("CCNameOnCard"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[Int](__obj.CCExpiryMonth, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("CCExpiryMonth"), __scope, false))


  }

  trait DefaultEwayCreateCustomerSequence3Format extends scalaxb.XMLFormat[org.birchavenue.eway.CreateCustomerSequence3] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, org.birchavenue.eway.CreateCustomerSequence3] = Left("don't call me.")
    
    def writes(__obj: org.birchavenue.eway.CreateCustomerSequence3, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scalaxb.toXML[Int](__obj.CCExpiryYear, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("CCExpiryYear"), __scope, false)


  }

  trait DefaultEwayCreateCustomerResponseFormat extends scalaxb.ElemNameParser[org.birchavenue.eway.CreateCustomerResponse] {
    val targetNamespace: Option[String] = Some("https://www.eway.com.au/gateway/managedpayment/test")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.eway.CreateCustomerResponse] =
      phrase(opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "CreateCustomerResult")) ^^
      { case p1 =>
      org.birchavenue.eway.CreateCustomerResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.eway.CreateCustomerResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.CreateCustomerResult map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("CreateCustomerResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultEwayEWAYHeaderFormat extends scalaxb.ElemNameParser[org.birchavenue.eway.EWAYHeader] {
    val targetNamespace: Option[String] = Some("https://www.eway.com.au/gateway/managedpayment/test")
    
    override def typeName: Option[String] = Some("eWAYHeader")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.eway.EWAYHeader] =
      phrase(opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "eWAYCustomerID")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "Username")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "Password")) ^^
      { case p1 ~ p2 ~ p3 =>
      org.birchavenue.eway.EWAYHeader(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scala.collection.immutable.ListMap((node match {
          case elem: scala.xml.Elem =>
            elem.attributes.toList flatMap {
              
              case scala.xml.UnprefixedAttribute(key, value, _) =>
                List(("@" + key, scalaxb.DataRecord(None, Some(key), value.text)))
              case scala.xml.PrefixedAttribute(pre, key, value, _) =>
                val ns = elem.scope.getURI(pre)
                List(("@{" + ns + "}" + key, scalaxb.DataRecord(Option[String](ns), Some(key), value.text)))
              case _ => Nil
            }
          case _ => Nil
        }): _*)) })
    
    override def writesAttribute(__obj: org.birchavenue.eway.EWAYHeader, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: org.birchavenue.eway.EWAYHeader, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.eWAYCustomerID map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("eWAYCustomerID"), __scope, false) } getOrElse {Nil},
        __obj.Username map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("Username"), __scope, false) } getOrElse {Nil},
        __obj.Password map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("Password"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultEwayUpdateCustomerFormat extends scalaxb.ElemNameParser[org.birchavenue.eway.UpdateCustomer] {
    val targetNamespace: Option[String] = Some("https://www.eway.com.au/gateway/managedpayment/test")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.eway.UpdateCustomer] =
      phrase((((scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "managedCustomerID")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "Title")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "FirstName")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "LastName")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "Address")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "Suburb")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "State")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "Company")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "PostCode")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "Country"))) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 => org.birchavenue.eway.UpdateCustomerSequence1(scalaxb.fromXML[Long](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) }) ~ 
      ((opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "Email")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "Fax")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "Phone")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "Mobile")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "CustomerRef")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "JobDesc")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "Comments")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "URL")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "CCNumber")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "CCNameOnCard"))) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 => org.birchavenue.eway.UpdateCustomerSequence2(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) }) ~ 
      (((scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "CCExpiryMonth")) ~ 
      (scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "CCExpiryYear"))) ^^ 
        { case p1 ~ p2 => org.birchavenue.eway.UpdateCustomerSequence3(scalaxb.fromXML[Int](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p2, scalaxb.ElemName(node) :: stack)) }) ^^
      { case p1 ~ p2 ~ p3 =>
      org.birchavenue.eway.UpdateCustomer(p1,
        p2,
        p3) })
    
    def writesChildNodes(__obj: org.birchavenue.eway.UpdateCustomer, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[org.birchavenue.eway.UpdateCustomerSequence1](__obj.updatecustomersequence1, None, Some("updatecustomersequence1"), __scope, false),
        scalaxb.toXML[org.birchavenue.eway.UpdateCustomerSequence2](__obj.updatecustomersequence2, None, Some("updatecustomersequence2"), __scope, false),
        scalaxb.toXML[org.birchavenue.eway.UpdateCustomerSequence3](__obj.updatecustomersequence3, None, Some("updatecustomersequence3"), __scope, false))

  }

  trait DefaultEwayUpdateCustomerSequence1Format extends scalaxb.XMLFormat[org.birchavenue.eway.UpdateCustomerSequence1] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, org.birchavenue.eway.UpdateCustomerSequence1] = Left("don't call me.")
    
    def writes(__obj: org.birchavenue.eway.UpdateCustomerSequence1, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(scalaxb.toXML[Long](__obj.managedCustomerID, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("managedCustomerID"), __scope, false),
        scalaxb.toXML[Option[String]](__obj.Title, Some("https://api.ewaypayments.com/"), Some("Title"), __scope, false),
        __obj.FirstName map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("FirstName"), __scope, false) } getOrElse {Nil},
        __obj.LastName map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("LastName"), __scope, false) } getOrElse {Nil},
        __obj.Address map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("Address"), __scope, false) } getOrElse {Nil},
        __obj.Suburb map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("Suburb"), __scope, false) } getOrElse {Nil},
        __obj.State map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("State"), __scope, false) } getOrElse {Nil},
        __obj.Company map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("Company"), __scope, false) } getOrElse {Nil},
        __obj.PostCode map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("PostCode"), __scope, false) } getOrElse {Nil},
        __obj.Country map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("Country"), __scope, false) } getOrElse {Nil})


  }

  trait DefaultEwayUpdateCustomerSequence2Format extends scalaxb.XMLFormat[org.birchavenue.eway.UpdateCustomerSequence2] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, org.birchavenue.eway.UpdateCustomerSequence2] = Left("don't call me.")
    
    def writes(__obj: org.birchavenue.eway.UpdateCustomerSequence2, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(__obj.Email map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("Email"), __scope, false) } getOrElse {Nil},
        __obj.Fax map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("Fax"), __scope, false) } getOrElse {Nil},
        __obj.Phone map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("Phone"), __scope, false) } getOrElse {Nil},
        __obj.Mobile map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("Mobile"), __scope, false) } getOrElse {Nil},
        __obj.CustomerRef map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("CustomerRef"), __scope, false) } getOrElse {Nil},
        __obj.JobDesc map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("JobDesc"), __scope, false) } getOrElse {Nil},
        __obj.Comments map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("Comments"), __scope, false) } getOrElse {Nil},
        __obj.URL map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("URL"), __scope, false) } getOrElse {Nil},
        __obj.CCNumber map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("CCNumber"), __scope, false) } getOrElse {Nil},
        __obj.CCNameOnCard map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("CCNameOnCard"), __scope, false) } getOrElse {Nil})


  }

  trait DefaultEwayUpdateCustomerSequence3Format extends scalaxb.XMLFormat[org.birchavenue.eway.UpdateCustomerSequence3] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, org.birchavenue.eway.UpdateCustomerSequence3] = Left("don't call me.")
    
    def writes(__obj: org.birchavenue.eway.UpdateCustomerSequence3, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(scalaxb.toXML[Int](__obj.CCExpiryMonth, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("CCExpiryMonth"), __scope, false),
        scalaxb.toXML[Int](__obj.CCExpiryYear, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("CCExpiryYear"), __scope, false))


  }

  trait DefaultEwayUpdateCustomerResponseFormat extends scalaxb.ElemNameParser[org.birchavenue.eway.UpdateCustomerResponse] {
    val targetNamespace: Option[String] = Some("https://www.eway.com.au/gateway/managedpayment/test")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.eway.UpdateCustomerResponse] =
      phrase((scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "UpdateCustomerResult")) ^^
      { case p1 =>
      org.birchavenue.eway.UpdateCustomerResponse(scalaxb.fromXML[Boolean](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: org.birchavenue.eway.UpdateCustomerResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[Boolean](__obj.UpdateCustomerResult, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("UpdateCustomerResult"), __scope, false))

  }

  trait DefaultEwayQueryCustomerFormat extends scalaxb.ElemNameParser[org.birchavenue.eway.QueryCustomer] {
    val targetNamespace: Option[String] = Some("https://www.eway.com.au/gateway/managedpayment/test")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.eway.QueryCustomer] =
      phrase((scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "managedCustomerID")) ^^
      { case p1 =>
      org.birchavenue.eway.QueryCustomer(scalaxb.fromXML[Long](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: org.birchavenue.eway.QueryCustomer, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[Long](__obj.managedCustomerID, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("managedCustomerID"), __scope, false))

  }

  trait DefaultEwayQueryCustomerResponseFormat extends scalaxb.ElemNameParser[org.birchavenue.eway.QueryCustomerResponse] {
    val targetNamespace: Option[String] = Some("https://www.eway.com.au/gateway/managedpayment/test")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.eway.QueryCustomerResponse] =
      phrase(opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "QueryCustomerResult")) ^^
      { case p1 =>
      org.birchavenue.eway.QueryCustomerResponse(p1.headOption map { scalaxb.fromXML[org.birchavenue.eway.CreditCard](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.eway.QueryCustomerResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.QueryCustomerResult map { scalaxb.toXML[org.birchavenue.eway.CreditCard](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("QueryCustomerResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultEwayCreditCardFormat extends scalaxb.ElemNameParser[org.birchavenue.eway.CreditCard] {
    val targetNamespace: Option[String] = Some("https://www.eway.com.au/gateway/managedpayment/test")
    
    override def typeName: Option[String] = Some("CreditCard")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.eway.CreditCard] =
      phrase((scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "ManagedCustomerID")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "CustomerRef")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "CustomerTitle")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "CustomerFirstName")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "CustomerLastName")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "CustomerCompany")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "CustomerJobDesc")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "CustomerEmail")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "CustomerAddress")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "CustomerSuburb")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "CustomerState")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "CustomerPostCode")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "CustomerCountry")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "CustomerPhone1")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "CustomerPhone2")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "CustomerFax")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "CustomerURL")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "CustomerComments")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "CCName")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "CCNumber")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "CCExpiryMonth")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "CCExpiryYear")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 ~ p19 ~ p20 ~ p21 ~ p22 =>
      org.birchavenue.eway.CreditCard(scalaxb.fromXML[Long](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p19.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p20.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p21.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p22.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.eway.CreditCard, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Long](__obj.ManagedCustomerID, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("ManagedCustomerID"), __scope, false),
        __obj.CustomerRef map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("CustomerRef"), __scope, false) } getOrElse {Nil},
        __obj.CustomerTitle map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("CustomerTitle"), __scope, false) } getOrElse {Nil},
        __obj.CustomerFirstName map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("CustomerFirstName"), __scope, false) } getOrElse {Nil},
        __obj.CustomerLastName map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("CustomerLastName"), __scope, false) } getOrElse {Nil},
        __obj.CustomerCompany map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("CustomerCompany"), __scope, false) } getOrElse {Nil},
        __obj.CustomerJobDesc map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("CustomerJobDesc"), __scope, false) } getOrElse {Nil},
        __obj.CustomerEmail map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("CustomerEmail"), __scope, false) } getOrElse {Nil},
        __obj.CustomerAddress map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("CustomerAddress"), __scope, false) } getOrElse {Nil},
        __obj.CustomerSuburb map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("CustomerSuburb"), __scope, false) } getOrElse {Nil},
        __obj.CustomerState map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("CustomerState"), __scope, false) } getOrElse {Nil},
        __obj.CustomerPostCode map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("CustomerPostCode"), __scope, false) } getOrElse {Nil},
        __obj.CustomerCountry map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("CustomerCountry"), __scope, false) } getOrElse {Nil},
        __obj.CustomerPhone1 map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("CustomerPhone1"), __scope, false) } getOrElse {Nil},
        __obj.CustomerPhone2 map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("CustomerPhone2"), __scope, false) } getOrElse {Nil},
        __obj.CustomerFax map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("CustomerFax"), __scope, false) } getOrElse {Nil},
        __obj.CustomerURL map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("CustomerURL"), __scope, false) } getOrElse {Nil},
        __obj.CustomerComments map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("CustomerComments"), __scope, false) } getOrElse {Nil},
        __obj.CCName map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("CCName"), __scope, false) } getOrElse {Nil},
        __obj.CCNumber map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("CCNumber"), __scope, false) } getOrElse {Nil},
        __obj.CCExpiryMonth map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("CCExpiryMonth"), __scope, false) } getOrElse {Nil},
        __obj.CCExpiryYear map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("CCExpiryYear"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultEwayManagedCustomerableFormat extends scalaxb.XMLFormat[org.birchavenue.eway.ManagedCustomerable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, org.birchavenue.eway.ManagedCustomerable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("CreditCard")) => Right(scalaxb.fromXML[org.birchavenue.eway.CreditCard](node, stack))
          case _ => Right(scalaxb.fromXML[org.birchavenue.eway.ManagedCustomer](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: org.birchavenue.eway.ManagedCustomerable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: org.birchavenue.eway.CreditCard => scalaxb.toXML[org.birchavenue.eway.CreditCard](x, __namespace, __elementLabel, __scope, true)
      case x: org.birchavenue.eway.ManagedCustomer => scalaxb.toXML[org.birchavenue.eway.ManagedCustomer](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultEwayManagedCustomerFormat extends scalaxb.ElemNameParser[org.birchavenue.eway.ManagedCustomer] {
    val targetNamespace: Option[String] = Some("https://www.eway.com.au/gateway/managedpayment/test")
    
    override def typeName: Option[String] = Some("ManagedCustomer")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.eway.ManagedCustomer] =
      phrase((scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "ManagedCustomerID")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "CustomerRef")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "CustomerTitle")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "CustomerFirstName")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "CustomerLastName")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "CustomerCompany")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "CustomerJobDesc")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "CustomerEmail")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "CustomerAddress")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "CustomerSuburb")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "CustomerState")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "CustomerPostCode")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "CustomerCountry")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "CustomerPhone1")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "CustomerPhone2")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "CustomerFax")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "CustomerURL")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "CustomerComments")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 ~ p9 ~ p10 ~ p11 ~ p12 ~ p13 ~ p14 ~ p15 ~ p16 ~ p17 ~ p18 =>
      org.birchavenue.eway.ManagedCustomer(scalaxb.fromXML[Long](p1, scalaxb.ElemName(node) :: stack),
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p8.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p9.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p10.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p11.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p12.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p13.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p14.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p15.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p16.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p17.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p18.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.eway.ManagedCustomer, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Long](__obj.ManagedCustomerID, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("ManagedCustomerID"), __scope, false),
        __obj.CustomerRef map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("CustomerRef"), __scope, false) } getOrElse {Nil},
        __obj.CustomerTitle map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("CustomerTitle"), __scope, false) } getOrElse {Nil},
        __obj.CustomerFirstName map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("CustomerFirstName"), __scope, false) } getOrElse {Nil},
        __obj.CustomerLastName map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("CustomerLastName"), __scope, false) } getOrElse {Nil},
        __obj.CustomerCompany map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("CustomerCompany"), __scope, false) } getOrElse {Nil},
        __obj.CustomerJobDesc map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("CustomerJobDesc"), __scope, false) } getOrElse {Nil},
        __obj.CustomerEmail map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("CustomerEmail"), __scope, false) } getOrElse {Nil},
        __obj.CustomerAddress map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("CustomerAddress"), __scope, false) } getOrElse {Nil},
        __obj.CustomerSuburb map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("CustomerSuburb"), __scope, false) } getOrElse {Nil},
        __obj.CustomerState map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("CustomerState"), __scope, false) } getOrElse {Nil},
        __obj.CustomerPostCode map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("CustomerPostCode"), __scope, false) } getOrElse {Nil},
        __obj.CustomerCountry map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("CustomerCountry"), __scope, false) } getOrElse {Nil},
        __obj.CustomerPhone1 map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("CustomerPhone1"), __scope, false) } getOrElse {Nil},
        __obj.CustomerPhone2 map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("CustomerPhone2"), __scope, false) } getOrElse {Nil},
        __obj.CustomerFax map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("CustomerFax"), __scope, false) } getOrElse {Nil},
        __obj.CustomerURL map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("CustomerURL"), __scope, false) } getOrElse {Nil},
        __obj.CustomerComments map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("CustomerComments"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultEwayQueryCustomerByReferenceFormat extends scalaxb.ElemNameParser[org.birchavenue.eway.QueryCustomerByReference] {
    val targetNamespace: Option[String] = Some("https://www.eway.com.au/gateway/managedpayment/test")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.eway.QueryCustomerByReference] =
      phrase(opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "CustomerReference")) ^^
      { case p1 =>
      org.birchavenue.eway.QueryCustomerByReference(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.eway.QueryCustomerByReference, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.CustomerReference map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("CustomerReference"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultEwayQueryCustomerByReferenceResponseFormat extends scalaxb.ElemNameParser[org.birchavenue.eway.QueryCustomerByReferenceResponse] {
    val targetNamespace: Option[String] = Some("https://www.eway.com.au/gateway/managedpayment/test")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.eway.QueryCustomerByReferenceResponse] =
      phrase(opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "QueryCustomerByReferenceResult")) ^^
      { case p1 =>
      org.birchavenue.eway.QueryCustomerByReferenceResponse(p1.headOption map { scalaxb.fromXML[org.birchavenue.eway.CreditCard](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.eway.QueryCustomerByReferenceResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.QueryCustomerByReferenceResult map { scalaxb.toXML[org.birchavenue.eway.CreditCard](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("QueryCustomerByReferenceResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultEwayProcessPaymentFormat extends scalaxb.ElemNameParser[org.birchavenue.eway.ProcessPayment] {
    val targetNamespace: Option[String] = Some("https://www.eway.com.au/gateway/managedpayment/test")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.eway.ProcessPayment] =
      phrase((scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "managedCustomerID")) ~ 
      (scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "amount")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "invoiceReference")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "invoiceDescription")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      org.birchavenue.eway.ProcessPayment(scalaxb.fromXML[Long](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.eway.ProcessPayment, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Long](__obj.managedCustomerID, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("managedCustomerID"), __scope, false),
        scalaxb.toXML[Int](__obj.amount, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("amount"), __scope, false),
        __obj.invoiceReference map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("invoiceReference"), __scope, false) } getOrElse {Nil},
        __obj.invoiceDescription map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("invoiceDescription"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultEwayProcessPaymentResponseFormat extends scalaxb.ElemNameParser[org.birchavenue.eway.ProcessPaymentResponse] {
    val targetNamespace: Option[String] = Some("https://www.eway.com.au/gateway/managedpayment/test")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.eway.ProcessPaymentResponse] =
      phrase((scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "ewayResponse")) ^^
      { case p1 =>
      org.birchavenue.eway.ProcessPaymentResponse(p1.nilOption map { scalaxb.fromXML[org.birchavenue.eway.CCPaymentResponse](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.eway.ProcessPaymentResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[Option[org.birchavenue.eway.CCPaymentResponse]](__obj.ewayResponse, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("ewayResponse"), __scope, false))

  }

  trait DefaultEwayCCPaymentResponseFormat extends scalaxb.ElemNameParser[org.birchavenue.eway.CCPaymentResponse] {
    val targetNamespace: Option[String] = Some("https://www.eway.com.au/gateway/managedpayment/test")
    
    override def typeName: Option[String] = Some("CCPaymentResponse")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.eway.CCPaymentResponse] =
      phrase(opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "ewayTrxnError")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "ewayTrxnStatus")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "ewayTrxnNumber")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "ewayReturnAmount")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "ewayAuthCode")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      org.birchavenue.eway.CCPaymentResponse(p1.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.eway.CCPaymentResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.ewayTrxnError map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("ewayTrxnError"), __scope, false) } getOrElse {Nil},
        __obj.ewayTrxnStatus map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("ewayTrxnStatus"), __scope, false) } getOrElse {Nil},
        __obj.ewayTrxnNumber map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("ewayTrxnNumber"), __scope, false) } getOrElse {Nil},
        __obj.ewayReturnAmount map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("ewayReturnAmount"), __scope, false) } getOrElse {Nil},
        __obj.ewayAuthCode map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("ewayAuthCode"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultEwayProcessPaymentWithBeagleFormat extends scalaxb.ElemNameParser[org.birchavenue.eway.ProcessPaymentWithBeagle] {
    val targetNamespace: Option[String] = Some("https://www.eway.com.au/gateway/managedpayment/test")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.eway.ProcessPaymentWithBeagle] =
      phrase((scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "managedCustomerID")) ~ 
      (scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "amount")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "invoiceReference")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "invoiceDescription")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "cvn")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "ipAddress")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "billingCountry")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 =>
      org.birchavenue.eway.ProcessPaymentWithBeagle(scalaxb.fromXML[Long](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p6.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p7.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.eway.ProcessPaymentWithBeagle, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Long](__obj.managedCustomerID, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("managedCustomerID"), __scope, false),
        scalaxb.toXML[Int](__obj.amount, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("amount"), __scope, false),
        __obj.invoiceReference map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("invoiceReference"), __scope, false) } getOrElse {Nil},
        __obj.invoiceDescription map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("invoiceDescription"), __scope, false) } getOrElse {Nil},
        __obj.cvn map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("cvn"), __scope, false) } getOrElse {Nil},
        __obj.ipAddress map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("ipAddress"), __scope, false) } getOrElse {Nil},
        __obj.billingCountry map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("billingCountry"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultEwayProcessPaymentWithBeagleResponseFormat extends scalaxb.ElemNameParser[org.birchavenue.eway.ProcessPaymentWithBeagleResponse] {
    val targetNamespace: Option[String] = Some("https://www.eway.com.au/gateway/managedpayment/test")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.eway.ProcessPaymentWithBeagleResponse] =
      phrase((scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "ewayResponse")) ^^
      { case p1 =>
      org.birchavenue.eway.ProcessPaymentWithBeagleResponse(p1.nilOption map { scalaxb.fromXML[org.birchavenue.eway.CCPaymentResponse](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.eway.ProcessPaymentWithBeagleResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[Option[org.birchavenue.eway.CCPaymentResponse]](__obj.ewayResponse, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("ewayResponse"), __scope, false))

  }

  trait DefaultEwayProcessPaymentWithCVNFormat extends scalaxb.ElemNameParser[org.birchavenue.eway.ProcessPaymentWithCVN] {
    val targetNamespace: Option[String] = Some("https://www.eway.com.au/gateway/managedpayment/test")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.eway.ProcessPaymentWithCVN] =
      phrase((scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "managedCustomerID")) ~ 
      (scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "amount")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "invoiceReference")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "invoiceDescription")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "cvn")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      org.birchavenue.eway.ProcessPaymentWithCVN(scalaxb.fromXML[Long](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        p5.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.eway.ProcessPaymentWithCVN, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Long](__obj.managedCustomerID, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("managedCustomerID"), __scope, false),
        scalaxb.toXML[Int](__obj.amount, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("amount"), __scope, false),
        __obj.invoiceReference map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("invoiceReference"), __scope, false) } getOrElse {Nil},
        __obj.invoiceDescription map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("invoiceDescription"), __scope, false) } getOrElse {Nil},
        __obj.cvn map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("cvn"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultEwayProcessPaymentWithCVNResponseFormat extends scalaxb.ElemNameParser[org.birchavenue.eway.ProcessPaymentWithCVNResponse] {
    val targetNamespace: Option[String] = Some("https://www.eway.com.au/gateway/managedpayment/test")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.eway.ProcessPaymentWithCVNResponse] =
      phrase((scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "ewayResponse")) ^^
      { case p1 =>
      org.birchavenue.eway.ProcessPaymentWithCVNResponse(p1.nilOption map { scalaxb.fromXML[org.birchavenue.eway.CCPaymentResponse](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.eway.ProcessPaymentWithCVNResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[Option[org.birchavenue.eway.CCPaymentResponse]](__obj.ewayResponse, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("ewayResponse"), __scope, false))

  }

  trait DefaultEwayQueryPaymentFormat extends scalaxb.ElemNameParser[org.birchavenue.eway.QueryPayment] {
    val targetNamespace: Option[String] = Some("https://www.eway.com.au/gateway/managedpayment/test")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.eway.QueryPayment] =
      phrase((scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "managedCustomerID")) ^^
      { case p1 =>
      org.birchavenue.eway.QueryPayment(scalaxb.fromXML[Long](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: org.birchavenue.eway.QueryPayment, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[Long](__obj.managedCustomerID, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("managedCustomerID"), __scope, false))

  }

  trait DefaultEwayQueryPaymentResponseFormat extends scalaxb.ElemNameParser[org.birchavenue.eway.QueryPaymentResponse] {
    val targetNamespace: Option[String] = Some("https://www.eway.com.au/gateway/managedpayment/test")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.eway.QueryPaymentResponse] =
      phrase(opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "QueryPaymentResult")) ^^
      { case p1 =>
      org.birchavenue.eway.QueryPaymentResponse(p1.headOption map { scalaxb.fromXML[org.birchavenue.eway.ArrayOfManagedTransaction](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: org.birchavenue.eway.QueryPaymentResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.QueryPaymentResult map { scalaxb.toXML[org.birchavenue.eway.ArrayOfManagedTransaction](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("QueryPaymentResult"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultEwayArrayOfManagedTransactionFormat extends scalaxb.ElemNameParser[org.birchavenue.eway.ArrayOfManagedTransaction] {
    val targetNamespace: Option[String] = Some("https://www.eway.com.au/gateway/managedpayment/test")
    
    override def typeName: Option[String] = Some("ArrayOfManagedTransaction")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.eway.ArrayOfManagedTransaction] =
      phrase(rep(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "ManagedTransaction")) ^^
      { case p1 =>
      org.birchavenue.eway.ArrayOfManagedTransaction(p1.toSeq map { _.nilOption map { scalaxb.fromXML[org.birchavenue.eway.ManagedTransaction](_, scalaxb.ElemName(node) :: stack) }}: _*) })
    
    def writesChildNodes(__obj: org.birchavenue.eway.ArrayOfManagedTransaction, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.ManagedTransaction flatMap { scalaxb.toXML[Option[org.birchavenue.eway.ManagedTransaction]](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("ManagedTransaction"), __scope, false) })

  }

  trait DefaultEwayManagedTransactionFormat extends scalaxb.ElemNameParser[org.birchavenue.eway.ManagedTransaction] {
    val targetNamespace: Option[String] = Some("https://www.eway.com.au/gateway/managedpayment/test")
    
    override def typeName: Option[String] = Some("ManagedTransaction")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[org.birchavenue.eway.ManagedTransaction] =
      phrase((scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "TotalAmount")) ~ 
      (scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "Result")) ~ 
      opt(scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "ResponseText")) ~ 
      (scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "TransactionDate")) ~ 
      (scalaxb.ElemName(Some("https://www.eway.com.au/gateway/managedpayment/test"), "ewayTrxnNumber")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      org.birchavenue.eway.ManagedTransaction(scalaxb.fromXML[Int](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p2, scalaxb.ElemName(node) :: stack),
        p3.headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p5, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: org.birchavenue.eway.ManagedTransaction, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[Int](__obj.TotalAmount, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("TotalAmount"), __scope, false),
        scalaxb.toXML[Int](__obj.Result, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("Result"), __scope, false),
        __obj.ResponseText map { scalaxb.toXML[String](_, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("ResponseText"), __scope, false) } getOrElse {Nil},
        scalaxb.toXML[javax.xml.datatype.XMLGregorianCalendar](__obj.TransactionDate, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("TransactionDate"), __scope, false),
        scalaxb.toXML[Int](__obj.ewayTrxnNumber, Some("https://www.eway.com.au/gateway/managedpayment/test"), Some("ewayTrxnNumber"), __scope, false))

  }


  trait ManagedCreditCardPaymentSoap12Bindings { this: scalaxb.SoapClients =>
    lazy val targetNamespace: Option[String] = Some("https://www.eway.com.au/gateway/managedpayment/test")
    lazy val service: org.birchavenue.eway.ManagedCreditCardPaymentSoap = new ManagedCreditCardPaymentSoap12Binding {}
    def baseAddress = new java.net.URI("https://www.eway.com.au/gateway/ManagedPaymentService/managedCreditCardPayment.asmx")

    trait ManagedCreditCardPaymentSoap12Binding extends org.birchavenue.eway.ManagedCreditCardPaymentSoap {
      def createCustomer(value: org.birchavenue.eway.CreateCustomer, eWAYHeader: org.birchavenue.eway.EWAYHeader): Either[scalaxb.Fault[Any], org.birchavenue.eway.CreateCustomerResponse] = 
        soapClient.requestResponse(scalaxb.toXML(value, Some("https://www.eway.com.au/gateway/managedpayment/test"), "CreateCustomer", defaultScope),
            scalaxb.toXML(eWAYHeader, Some("https://www.eway.com.au/gateway/managedpayment/test"), "eWAYHeader", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("https://www.eway.com.au/gateway/managedpayment/test/CreateCustomer"))) match {
          case Left(x)  => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[org.birchavenue.eway.CreateCustomerResponse](body.headOption getOrElse {body}))
        }
      def updateCustomer(value: org.birchavenue.eway.UpdateCustomer, eWAYHeader: org.birchavenue.eway.EWAYHeader): Either[scalaxb.Fault[Any], Boolean] = 
        soapClient.requestResponse(scalaxb.toXML(value, Some("https://www.eway.com.au/gateway/managedpayment/test"), "UpdateCustomer", defaultScope),
            scalaxb.toXML(eWAYHeader, Some("https://www.eway.com.au/gateway/managedpayment/test"), "eWAYHeader", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("https://www.eway.com.au/gateway/managedpayment/test/UpdateCustomer"))) match {
          case Left(x)  => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[org.birchavenue.eway.UpdateCustomerResponse](body.headOption getOrElse {body}).UpdateCustomerResult)
        }
      def queryCustomer(value: org.birchavenue.eway.QueryCustomer, eWAYHeader: org.birchavenue.eway.EWAYHeader): Either[scalaxb.Fault[Any], org.birchavenue.eway.QueryCustomerResponse] = 
        soapClient.requestResponse(scalaxb.toXML(value, Some("https://www.eway.com.au/gateway/managedpayment/test"), "QueryCustomer", defaultScope),
            scalaxb.toXML(eWAYHeader, Some("https://www.eway.com.au/gateway/managedpayment/test"), "eWAYHeader", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("https://www.eway.com.au/gateway/managedpayment/test/QueryCustomer"))) match {
          case Left(x)  => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[org.birchavenue.eway.QueryCustomerResponse](body.headOption getOrElse {body}))
        }
      def queryCustomerByReference(value: org.birchavenue.eway.QueryCustomerByReference, eWAYHeader: org.birchavenue.eway.EWAYHeader): Either[scalaxb.Fault[Any], org.birchavenue.eway.QueryCustomerByReferenceResponse] = 
        soapClient.requestResponse(scalaxb.toXML(value, Some("https://www.eway.com.au/gateway/managedpayment/test"), "QueryCustomerByReference", defaultScope),
            scalaxb.toXML(eWAYHeader, Some("https://www.eway.com.au/gateway/managedpayment/test"), "eWAYHeader", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("https://www.eway.com.au/gateway/managedpayment/test/QueryCustomerByReference"))) match {
          case Left(x)  => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[org.birchavenue.eway.QueryCustomerByReferenceResponse](body.headOption getOrElse {body}))
        }
      def processPayment(value: org.birchavenue.eway.ProcessPayment, eWAYHeader: org.birchavenue.eway.EWAYHeader): Either[scalaxb.Fault[Any], Option[org.birchavenue.eway.CCPaymentResponse]] = 
        soapClient.requestResponse(scalaxb.toXML(value, Some("https://www.eway.com.au/gateway/managedpayment/test"), "ProcessPayment", defaultScope),
            scalaxb.toXML(eWAYHeader, Some("https://www.eway.com.au/gateway/managedpayment/test"), "eWAYHeader", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("https://www.eway.com.au/gateway/managedpayment/test/ProcessPayment"))) match {
          case Left(x)  => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[org.birchavenue.eway.ProcessPaymentResponse](body.headOption getOrElse {body}).ewayResponse)
        }
      def processPaymentWithBeagle(value: org.birchavenue.eway.ProcessPaymentWithBeagle, eWAYHeader: org.birchavenue.eway.EWAYHeader): Either[scalaxb.Fault[Any], Option[org.birchavenue.eway.CCPaymentResponse]] = 
        soapClient.requestResponse(scalaxb.toXML(value, Some("https://www.eway.com.au/gateway/managedpayment/test"), "ProcessPaymentWithBeagle", defaultScope),
            scalaxb.toXML(eWAYHeader, Some("https://www.eway.com.au/gateway/managedpayment/test"), "eWAYHeader", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("https://www.eway.com.au/gateway/managedpayment/test/ProcessPaymentWithBeagle"))) match {
          case Left(x)  => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[org.birchavenue.eway.ProcessPaymentWithBeagleResponse](body.headOption getOrElse {body}).ewayResponse)
        }
      def processPaymentWithCVN(value: org.birchavenue.eway.ProcessPaymentWithCVN, eWAYHeader: org.birchavenue.eway.EWAYHeader): Either[scalaxb.Fault[Any], Option[org.birchavenue.eway.CCPaymentResponse]] = 
        soapClient.requestResponse(scalaxb.toXML(value, Some("https://www.eway.com.au/gateway/managedpayment/test"), "ProcessPaymentWithCVN", defaultScope),
            scalaxb.toXML(eWAYHeader, Some("https://www.eway.com.au/gateway/managedpayment/test"), "eWAYHeader", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("https://www.eway.com.au/gateway/managedpayment/test/ProcessPaymentWithCVN"))) match {
          case Left(x)  => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[org.birchavenue.eway.ProcessPaymentWithCVNResponse](body.headOption getOrElse {body}).ewayResponse)
        }
      def queryPayment(value: org.birchavenue.eway.QueryPayment, eWAYHeader: org.birchavenue.eway.EWAYHeader): Either[scalaxb.Fault[Any], org.birchavenue.eway.QueryPaymentResponse] = 
        soapClient.requestResponse(scalaxb.toXML(value, Some("https://www.eway.com.au/gateway/managedpayment/test"), "QueryPayment", defaultScope),
            scalaxb.toXML(eWAYHeader, Some("https://www.eway.com.au/gateway/managedpayment/test"), "eWAYHeader", defaultScope), defaultScope, baseAddress, "POST", Some(new java.net.URI("https://www.eway.com.au/gateway/managedpayment/test/QueryPayment"))) match {
          case Left(x)  => Left(x)
          case Right((header, body)) =>
            Right(scalaxb.fromXML[org.birchavenue.eway.QueryPaymentResponse](body.headOption getOrElse {body}))
        }
    }
  }



}

